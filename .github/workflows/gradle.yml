# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "be-dev" ]
  pull_request:
    branches: [ "be-dev" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:

    # github actions에서 사용할 jdk 버전 설정
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: move to backend directory
      run: cd backend

    # application.yml 생성
    - name: make application.yml
      working-directory: backend
      run: |
        mkdir ./src/main/resources # resources 폴더 생성
        cd ./src/main/resources # resources 폴더로 이동
        touch ./application.yml # application.yml 생성
        echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties

   
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      
    # gradle build
    - name: Build with Gradle Wrapper
      working-directory: backend
      run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

    # 도커 이미지 빌드 및 docker hub로 push
    # 필요하면 if: contains(github.ref, 'main') 이런거 쓸 수 있음
    - name: docker build / push docker hub
      working-directory: backend
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/issue_docker .
        docker push ${{ secrets.DOCKER_USERNAME }}/issue_docker

    # 생성된 docker 이미지를 EC2로 보내기
    # if: contains(github.ref, 'develop')
    - name: docker hub to EC2
      uses: appleboy/ssh-action@master
      id: deploy-dev
      with:
        host: ${{ secrets.EC2_HOST }} # EC2 퍼블릭 IPv4 DNS
        username: ${{ secrets.EC2_USERNAME }} # ubuntu
        # password: ${{ secrets.PASSWORD }} # 비밀번호는 pem이 대신 해줄거야.
        port: 22
        key: ${{ secrets.EC2_DAO_HOME_PK }}
        script: |
          sudo docker ps
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/issue_docker
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/issue_docker
          sudo docker image prune -f
      

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      with:
        build-root-directory: backend # Specify the path to the Gradle Wrapper
